# Copyright 2021-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# File or directory operations in guest OS through VMware Tools.
# Parameters:
#   operation: File operation in guest OS, valid values are:
#     'create_dir', 'delete_dir', 'fetch_file', 'copy_file'.
#   tools_ready_in_guest_file_ops (optional): If set to false, will
#     wait for VMware Tools status is running before doing file operation.
#     Default value is true.
#   guest_file_ops_ignore_error (optional): Whether to ignore errors during
#     file operation. Default value is false.
#   dir_path: The directory path to be created or deleted when 'operation' is
#     set to 'create_dir', 'delete_dir'.
#   recurse: Whether to create or delete the directory path recursively or not
#     when 'operation' is set to 'create_dir', 'delete_dir'.
#   src_path: The source file path in guest OS when 'operation' is set to
#     'fetch_file', the source file path on localhost when 'operation' is set to
#     'copy_file'.
#   dest_path: The dest file path on localhost when 'operation' is set to
#     'fetch_file', the dest file path in guest OS when 'operation' is set to
#     'copy_file'.
#   overwrite: Overwrite the dest file or not if it exists when 'operation'
#     is set to 'copy_file'.
#
- name: "By default won't wait for VMware Tools to be running and not ignore error"
  ansible.builtin.set_fact:
    tools_ready_in_guest_file_ops: "{{ tools_ready_in_guest_file_ops | default(true) }}"
    guest_file_ops_ignore_error: "{{ guest_file_ops_ignore_error | default(false) }}"

- name: "Wait for VMware Tools in running status"
  include_tasks: vm_wait_vmtools_status.yml
  vars:
    vm_wait_vmtools_running: true
  when: not tools_ready_in_guest_file_ops

- name: "Create directory in guest OS"
  when: operation == "create_dir"
  block:
    - name: "Create directory {{ dir_path }}"
      community.vmware.vmware_guest_file_operation:
        hostname: "{{ vsphere_host_name }}"
        username: "{{ vsphere_host_user }}"
        password: "{{ vsphere_host_user_password }}"
        datacenter: "{{ vsphere_host_datacenter }}"
        validate_certs: "{{ validate_certs | default(false) }}"
        vm_id: "{{ vm_name }}"
        vm_username: "{{ vm_username }}"
        vm_password: "{{ vm_password }}"
        directory:
          path: "{{ dir_path }}"
          operation: "create"
          recurse: "{{ recurse }}"
      register: create_dir_op
      ignore_errors: true
    - name: "Print the result of create directory"
      ansible.builtin.debug: var=create_dir_op
      when: enable_debug
    - name: "Ignore directory exists error or configured to ignore error"
      ansible.builtin.fail:
        msg: "Failed to create diretory: '{{ dir_path }}', due to {{ create_dir_op.msg }}"
      when:
        - not guest_file_ops_ignore_error
        - create_dir_op is defined
        - not create_dir_op.changed
        - ('msg' in create_dir_op) and (create_dir_op.msg.count('already exists') == 0)

- name: "Delete directory in guest OS"
  when: operation == "delete_dir"
  block:
    - name: "Delete directory {{ dir_path }}"
      community.vmware.vmware_guest_file_operation:
        hostname: "{{ vsphere_host_name }}"
        username: "{{ vsphere_host_user }}"
        password: "{{ vsphere_host_user_password }}"
        datacenter: "{{ vsphere_host_datacenter }}"
        validate_certs: "{{ validate_certs | default(false) }}"
        vm_id: "{{ vm_name }}"
        vm_username: "{{ vm_username }}"
        vm_password: "{{ vm_password }}"
        directory:
          path: "{{ dir_path }}"
          operation: "delete"
          recurse: "{{ recurse }}"
      register: delete_dir_op
      ignore_errors: "{{ guest_file_ops_ignore_error }}"
    - name: "Print result of delete directory in guest OS"
      ansible.builtin.debug: var=delete_dir_op
      when: enable_debug

- name: "Fetch file from guest OS"
  when: operation == "fetch_file"
  block:
    - name: "Check If the destination base directory exist"
      ansible.builtin.stat:
        path: "{{ dest_path | dirname }}"
      ignore_errors: true
      register: fetch_dir_stat
    - name: "Create destination base directory"
      include_tasks: create_directory.yml
      vars:
        dir_path: "{{ dest_path | dirname }}"
        dir_mode: "0777"
      when: not fetch_dir_stat.stat.exists
    - name: "Fetch file {{ src_path }}"
      community.vmware.vmware_guest_file_operation:
        hostname: "{{ vsphere_host_name }}"
        username: "{{ vsphere_host_user }}"
        password: "{{ vsphere_host_user_password }}"
        datacenter: "{{ vsphere_host_datacenter }}"
        validate_certs: "{{ validate_certs | default(false) }}"
        vm_id: "{{ vm_name }}"
        vm_username: "{{ vm_username }}"
        vm_password: "{{ vm_password }}"
        fetch:
          src: "{{ src_path }}"
          dest: "{{ dest_path }}"
      register: fetch_file_op
      ignore_errors: "{{ guest_file_ops_ignore_error }}"
    - name: "Print result of fetch file from guest OS"
      ansible.builtin.debug: var=fetch_file_op
      when: enable_debug

- name: "Copy file to guest OS"
  when: operation == "copy_file"
  block:
    - name: "Copy file {{ src_path }}"
      community.vmware.vmware_guest_file_operation:
        hostname: "{{ vsphere_host_name }}"
        username: "{{ vsphere_host_user }}"
        password: "{{ vsphere_host_user_password }}"
        datacenter: "{{ vsphere_host_datacenter }}"
        validate_certs: "{{ validate_certs | default(false) }}"
        vm_id: "{{ vm_name }}"
        vm_username: "{{ vm_username }}"
        vm_password: "{{ vm_password }}"
        ansible.builtin.copy:
          src: "{{ src_path }}"
          dest: "{{ dest_path }}"
          overwrite: "{{ overwrite | default(true) }}"
      register: copy_file_op
      ignore_errors: "{{ guest_file_ops_ignore_error }}"
    - name: "Print result of copy file to guest OS"
      ansible.builtin.debug: var=copy_file_op
      when: enable_debug
