# Copyright 2023 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
- name: "Set current test case index, name and log folder"
  include_tasks: ../../../common/set_current_testcase_facts.yml
  vars:
    create_test_log_folder: true

- name: "Set facts of VM path and vmx path"
  block:
    - name: "Set the default VM folder in Windows host"
      ansible.builtin.set_fact:
        dh_vm_path: "C:\\Users\\{{ host_machine_username }}\\Documents\\Virtual Machines"
      when: dh_vm_path is undefined or not dh_vm_path
    - name: "Set fact of VM vmx file path in Windows host"
      ansible.builtin.set_fact:
        dh_vm_vmx_path: "{{ dh_vm_path }}\\{{ dh_vm_name }}\\{{ dh_vm_name }}.vmx"
  when: dh_vm_vmx_path is undefined or not dh_vm_vmx_path
- name: "Display VM path info"
  ansible.builtin.debug:
    msg:
      - "VM folder parent path: {{ dh_vm_path }}"
      - "VM vmx file path: {{ dh_vm_vmx_path }}"

# Test cases depend on Desktop Hypervisor installed in host machine,
# 'dh_host_installed' is set to true in test case 'install_workstation',
# and will be set to false in test case 'uninstall_workstation (TBD)'.
- name: "Check if Workstation is installed in host"
  block:
    - name: "Get Workstation install status in Windows host"
      include_tasks: ../../../windows/utils/win_get_software_install_status.yml
      vars:
        win_software_name: "VMware Workstation"
        vm_guest_ip: "{{ host_machine_hostname }}"
    - name: "Set fact of Workstation install status"
      ansible.builtin.set_fact:
        dh_host_installed: "{{ win_software_is_installed }}"
  when: dh_host_installed is undefined or not dh_host_installed

- name: "Get Workstation installed path"
  block:
    - name: "Get Workstation installed path in Windows host"
      include_tasks: ../../../windows/utils/win_get_software_install_path.yml
      vars:
        win_software_name: "VMware Workstation"
        vm_guest_ip: "{{ host_machine_hostname }}"
    - name: "Set fact of Workstation installed path"
      ansible.builtin.set_fact:
        dh_host_installed_path: "{{ win_software_install_path }}"
  when:
    - dh_host_installed
    - dh_host_installed_path is undefined or not dh_host_installed_path

- name: "Skip test case"
  include_tasks: ../../../common/skip_test_case.yml
  vars:
    skip_msg: "Test case '{{ current_testcase_name }}' is blocked because Workstation install status: '{{ dh_host_installed }}' is not true, or Workstation install path: '{{ dh_host_installed_path }}' is empty."
    skip_reason: "Blocked"
  when: >
    (not dh_host_installed) or
    (not dh_host_installed_path)

- name: "Set fact of 'vmware-vdiskmanager.exe' tool path"
  ansible.builtin.set_fact:
    dh_host_vdisk_manager_path: "{{ dh_host_installed_path }}\\vmware-vdiskmanager.exe"
  when: dh_host_vdisk_manager_path is undefined or not dh_host_vdisk_manager_path

- name: "Set facts of 'vmrun.exe' tool path"
  ansible.builtin.set_fact:
    dh_host_vmrun_path: "{{ dh_host_installed_path }}\\vmrun.exe"
  when: dh_host_vmrun_path is undefined or not dh_host_vmrun_path

# Test cases except 'dh_deploy_vm' depend on VM deployed on Desktop Hypervisor,
# 'dh_vm_exists' is set to true in test case 'dh_deploy_vm'.
- name: "Check if VM exists"
  block:
    - name: "Get VM existence status"
      include_tasks: ../../common/win_host_check_vm_exists.yml
    - name: "Set fact of VM existence status"
      ansible.builtin.set_fact:
        dh_vm_exists: "{{ dh_vm_check_exist }}"
        dh_vm_vmx_exists: "{{ dh_vm_vmx_check_exist }}"
  when:
    - dh_host_installed
    - dh_vm_exists is undefined or not dh_vm_exists

- name: "Skip test case"
  include_tasks: ../../../common/skip_test_case.yml
  vars:
    skip_msg: "Test case '{{ current_testcase_name }}' is blocked because VM '{{ dh_vm_name }}' does not exist."
    skip_reason: "Blocked"
  when:
    - require_dh_vm_exists | default(true)
    - not dh_vm_exists
    - not dh_vm_vmx_exists
