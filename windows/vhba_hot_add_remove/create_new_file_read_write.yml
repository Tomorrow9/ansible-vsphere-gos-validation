# Copyright 2022-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
- name: "Set fact of test file path and test content"
  ansible.builtin.set_fact:
    write_test_file_path: "{{ drive_letter_new }}:\\test_disk_write.txt"
    test_line: "This is the test line to write to the file. "

- name: "Create new test file in guest OS"
  include_tasks: ../utils/win_create_file.yml
  vars:
    new_empty_file_path: "{{ write_test_file_path }}"

- name: "Get test file status in guest OS"
  include_tasks: ../utils/win_check_file_exist.yml
  vars:
    win_check_file_exist_file: "{{ write_test_file_path }}"

- name: "Check test file exists in guest OS"
  ansible.builtin.assert:
    that:
      - win_check_file_exist_result
    success_msg: "New created file is found in guest OS"
    fail_msg: "New created file is not found in guest OS: {{ write_test_file_path }}"

- name: "Write content to the test file"
  include_tasks: ../utils/win_write_to_file.yml
  vars:
    write_file_path: "{{ write_test_file_path }}"
    write_file_content: "{% for i in range(0, 10) %}{{ test_line }}\n{% endfor %}"

- name: "Get the content of test file"
  include_tasks: ../utils/win_execute_cmd.yml
  vars:
    win_powershell_cmd: "type {{ write_test_file_path }}"

- name: "Save the result of getting new file content"
  ansible.builtin.set_fact:
    get_file_content_result1: "{{ win_powershell_cmd_output }}"

- name: "Check content in test file"
  ansible.builtin.assert:
    that:
      - get_file_content_result1.stdout is defined
      - get_file_content_result1.stdout
      - "test_line in get_file_content_result1.stdout"
    fail_msg: "The file content is '{{ get_file_content_result1.stdout }}', which should contain: '{{ test_line }}'"

- name: "Handle known issue"
  include_tasks: handle_sata_known_issue.yml
  when:
    - on_new_controller
    - test_disk_ctrl_type == 'sata'
    - vm_firmware == 'bios'
    - win_boot_disk_ctrl_type not in ['ide', 'sata']

- name: "Meet the conditions of known issue on VM with NVMe boot disk controller"
  ansible.builtin.set_fact:
    nvme_boot_known_issue: true
  when:
    - test_disk_ctrl_type == 'nvme'
    - win_boot_disk_ctrl_type == 'nvme'
    - guest_os_ansible_distribution is search('2025')
    - vm_firmware == 'bios'

- name: "Restart guest OS"
  include_tasks: ../utils/win_shutdown_restart.yml
  vars:
    set_win_power_state: "restart"
    win_reboot_ignore_error: true

- name: "Restart guest OS failed"
  when: restart_guest_os.failed | default(false)
  block:
    - name: "Set fact of the error message"
      ansible.builtin.set_fact:
        disk_issue_msg: >-
          Failed to reboot guest OS after writing content to the new disk added to the
          existing '{{ new_disk_node_ctrl_type }}' {{ test_disk_ctrl_type }} controller
          on node '{{ new_disk_node_ctrl_bus }}:{{ new_disk_node_unit_num }}'.
      when: test_disk_ctrl_type != 'nvdimm'

    - name: "Set fact of the error message"
      ansible.builtin.set_fact:
        disk_issue_msg: >-
          Failed to reboot guest OS after writing content to the new added PMem disk to
          the NVDIMM controller.
      when: test_disk_ctrl_type == 'nvdimm'

    - name: "Handle known issue on {{ new_disk_node_ctrl_type }} {{ test_disk_ctrl_type }} controller"
      include_tasks: handle_nvme_boot_known_issue.yml
      when: nvme_boot_known_issue

    - name: "Restart guest OS failed on {{ guest_os_ansible_distribution }}"
      ansible.builtin.fail:
        msg: "{{ disk_issue_msg }}"
      when: not nvme_boot_known_issue

- name: "Check new file content again after guest OS restart"
  include_tasks: check_file_after_restart.yml
  when: not restart_guest_os.failed | default(false)
