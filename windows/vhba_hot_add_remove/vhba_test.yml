# Copyright 2021-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Notes on Windows VM disk controller types:
# - paravirtual: inbox pvscsi driver or VMware Tools installed in guest OS.
# - lsilogic: no inbox driver in Windows guest OS now, so no testing.
# - buslogic: not supported in 64bit Windows guest OS, so no testing.
#
- name: "Set fact of whether VM NVMe version 1.3 is enabled by default"
  when:
    - vm_hardware_version_num | int >= 21
    - test_disk_ctrl_type == 'nvme'
    - vm_nvme_spec13_enabled is undefined
  block:
    - name: "For Windows {{ guest_os_product_type }} with guest ID {{ vm_guest_id }}"
      ansible.builtin.set_fact:
        vm_nvme_spec13_enabled: "{{ vm_guest_id | regex_search('windows(\\d+)srvNext', '\\1') | first | int >= 2019 }}"
      when:
        - guest_os_product_type == 'server'
        - vm_guest_id | regex_search('windows(\\d+)srvNext')

    - name: "For Windows {{ guest_os_product_type }} with guest ID {{ vm_guest_id }}"
      ansible.builtin.set_fact:
        vm_nvme_spec13_enabled: "{{ vm_guest_id | regex_search('windows(\\d+)_', '\\1') | first | int >= 11 }}"
      when:
        - guest_os_product_type == 'client'
        - vm_guest_id | regex_search('windows(\\d+)_')

- name: "Skip test case"
  include_tasks: ../../common/skip_test_case.yml
  vars:
    skip_msg: >-
      Skip testing on this guest OS '{{ guest_os_ansible_distribution }}' with VM hardware version
      '{{ vm_hardware_version_num }}', since NVMe version is 1.3 by default for Windows Server 2022,
      Windows 11 and later VMs with hardware version 21 on ESXi 8.0.2 and later.
      So skip this test case and only run test case 'nvme_vhba_device_ops' with default NVMe v1.3.
    skip_reason: "Not Applicable"
  when:
    - test_disk_ctrl_type == 'nvme'
    - test_purpose == "hot-add-spec13"
    - vm_nvme_spec13_enabled is defined and vm_nvme_spec13_enabled

- name: "Get VM current disk controller info"
  include_tasks: get_vm_disk_ctrl_info.yml

- name: "Print whether can add new disk controller"
  ansible.builtin.debug:
    msg: "Can add a new '{{ disk_controller }}' controller since existing controller number {{ disk_controller_count }} < 4."
  when: disk_controller_count | int < 4

- name: "Skip test case"
  include_tasks: ../../common/skip_test_case.yml
  vars:
    skip_msg: "Test case is blocked due to controller '{{ disk_controller }}' number is already 4: {{ disk_controller_count }}."
    skip_reason: "Blocked"
  when: disk_controller_count | int == 4

- name: "Preparation for the testing"
  include_tasks: vhba_test_prepare.yml

- name: "Execute disk hot add and remove test"
  when: >
    (test_purpose == "hot-add") or
    (test_purpose == "hot-add-spec13")
  block:
    - name: "Test on hot adding disk to boot disk controller"
      when: test_disk_ctrl_type == win_boot_disk_ctrl_type
      block:
        - name: "Hot add a new disk to boot disk controller"
          include_tasks: hotadd_disk_existing_ctrl.yml
          vars:
            test_on_boot_ctrl: true
        - name: "Hot remove the new disk from boot disk controller"
          include_tasks: hotremove_disk_boot_ctrl.yml
          when: not nvme_issue_disk_removed

    - name: "Hot add a new disk to the new disk controller at the same time"
      include_tasks: hotadd_disk_new_ctrl.yml

    - name: "Hot add a new disk to the existing controller added above"
      include_tasks: hotadd_disk_existing_ctrl.yml
      vars:
        test_on_boot_ctrl: false

    - name: "Hot remove the new added disks and disk controller"
      include_tasks: hotremove_disk_and_ctrl.yml

- name: "Execute disk hot extend test"
  include_tasks: hot_extend_disk_test.yml
  when: test_purpose == "hot-extend"
