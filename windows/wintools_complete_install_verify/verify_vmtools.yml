# Copyright 2021-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
- name: "Set fact of expected VMware Tools processes usernames"
  ansible.builtin.set_fact:
    win_vmtoolsd_username_list: ["NT AUTHORITY\\SYSTEM", "{{ guest_os_hostname }}\\{{ vm_username }}"]

# Refresh VM guest info
- name: "Update VM guest info after installing VMware Tools"
  include_tasks: ../../common/vm_get_guest_info.yml

# Get VMware Tools version
- name: "Get VMware Tools version and build number"
  include_tasks: ../utils/win_get_vmtools_version_build.yml

- name: "Set fact of expected VMware Tools services"
  ansible.builtin.set_fact:
    win_tools_services: |-
      {%- if esxi_cpu_vendor != 'arm' and (vmtools_version is defined and vmtools_version is version('10.3.0', '>=')) -%}
      ['VGAuthService', 'VMTools', 'vmvss']
      {%- else -%}
      ['VMTools']
      {% endif %}

- name: "Get VMware Tools services list"
  include_tasks: ../utils/win_get_vmtools_service_list.yml
  vars:
    win_get_vmtools_service_retries: 6
    win_get_vmtools_service_expect: "{{ win_tools_services }}"

- name: "Check VMware Tools service is running"
  ansible.builtin.assert:
    that:
      - vmtools_service_dict['VMTools'] == "Running"
    fail_msg: "'VMTools' service is not 'Running' after VMware Tools install: {{ vmtools_service_dict['VMTools'] }}"

- name: "Get drivers with VMware or Broadcom manufacturer"
  include_tasks: ../utils/win_get_vmtools_driver_list.yml

- name: "Check drivers list not empty"
  ansible.builtin.assert:
    that:
      - vmtools_driver_list | length != 0
    fail_msg: "Not get installed drivers with VMware or Broadcom manufacturer after VMware Tools install."

- name: "Get usernames of VMware Tools processes in guest OS"
  include_tasks: ../utils/win_execute_cmd.yml
  vars:
    win_powershell_cmd: "(Get-Process vmtoolsd -IncludeUserName).UserName"

- name: "Check usernames of VMware Tools processes"
  ansible.builtin.assert:
    that:
      - win_powershell_cmd_output.stdout_lines is defined
      - win_powershell_cmd_output.stdout_lines | length == 2
      - win_powershell_cmd_output.stdout_lines | sort == win_vmtoolsd_username_list | sort
    fail_msg: >-
      Get usernames of 'vmtoolsd' processes:
      {{ win_powershell_cmd_output.stdout_lines | default('') }},
      expected ones are {{ win_vmtoolsd_username_list }}.
    success_msg: >-
      Get usernames of 'vmtoolsd' processes:
      {{ win_powershell_cmd_output.stdout_lines }}.

# In Windows Server 2012 R2 or older OS there is no cmdlet 'Get-PnpDevice',
# so here only check in newer OS
- name: "Check if there is problem device in Device Manager"
  when: guest_os_ansible_distribution_ver is version('6.3.9600.0', '>')
  block:
    - name: "Get problem device after VMware Tools install"
      include_tasks: ../utils/win_get_problem_device.yml

    - name: "Handle known issue"
      when:
        - esxi_cpu_vendor == 'arm'
        - gos_problem_device_list | length == 1
        - gos_problem_device_list[0]['device_name'] == "Base System Device"
      block:
        - name: "Known issue - problem device exists in guest OS on ESXi on ARM"
          ansible.builtin.debug:
            msg:
              - "Get problem device in guest OS on ESXi on ARM with VMware Tools {{ vmtools_info_from_vmtoolsd }} installed: {{ gos_problem_device_list }}"
          tags:
            - known_issue
        - name: "Set fact of problem device known issue"
          ansible.builtin.set_fact:
            problem_device_known_issue: true

    - name: "Check no problem device listed"
      ansible.builtin.assert:
        that:
          - gos_has_problem_device is defined
          - not gos_has_problem_device
        fail_msg: "Problem devices were found in guest OS, please check listed problem devices: {{ gos_problem_device_list }}"
        success_msg: "No problem device is found in guest OS."
      when: problem_device_known_issue is undefined
